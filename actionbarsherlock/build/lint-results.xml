<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 22.3">

    <issue
        id="DuplicateIds"
        severity="Warning"
        message="Duplicate id @+id/abs__image, already defined earlier in this layout"
        category="Correctness"
        priority="7"
        summary="Checks for duplicate ids within a single layout"
        explanation="Within a layout, id&apos;s should be unique since otherwise `findViewById()` can return an unexpected view."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="57"
            column="20"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="35"
            column="20"/>
    </issue>

    <issue
        id="DuplicateIds"
        severity="Warning"
        message="Duplicate id @+id/abs__image, already defined earlier in this layout"
        category="Correctness"
        priority="7"
        summary="Checks for duplicate ids within a single layout"
        explanation="Within a layout, id&apos;s should be unique since otherwise `findViewById()` can return an unexpected view."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="57"
            column="20"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="35"
            column="20"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="48"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="48"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="51"
            column="41"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="51"
            column="41"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="41"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="41"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="44"
            column="41"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="44"
            column="41"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="        android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="        android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar_overlay&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="    &lt;com.actionbarsherlock.internal.widget.ActionBarContainer android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="53"
            column="63"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar_overlay&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="    &lt;com.actionbarsherlock.internal.widget.ActionBarContainer android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="53"
            column="63"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_STANDARD"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_STANDARD = android.app.ActionBar.NAVIGATION_MODE_STANDARD;"
        errorLine2="                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="66"
            column="56"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_STANDARD"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_STANDARD = android.app.ActionBar.NAVIGATION_MODE_STANDARD;"
        errorLine2="                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="66"
            column="56"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_LIST"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_LIST = android.app.ActionBar.NAVIGATION_MODE_LIST;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="73"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_LIST"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_LIST = android.app.ActionBar.NAVIGATION_MODE_LIST;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="73"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_TABS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_TABS = android.app.ActionBar.NAVIGATION_MODE_TABS;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="79"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#NAVIGATION_MODE_TABS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int NAVIGATION_MODE_TABS = android.app.ActionBar.NAVIGATION_MODE_TABS;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="79"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_USE_LOGO"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_USE_LOGO = android.app.ActionBar.DISPLAY_USE_LOGO;"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="88"
            column="48"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_USE_LOGO"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_USE_LOGO = android.app.ActionBar.DISPLAY_USE_LOGO;"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="88"
            column="48"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_HOME"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_HOME = android.app.ActionBar.DISPLAY_SHOW_HOME;"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="97"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_HOME"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_HOME = android.app.ActionBar.DISPLAY_SHOW_HOME;"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="97"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_HOME_AS_UP"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_HOME_AS_UP = android.app.ActionBar.DISPLAY_HOME_AS_UP;"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="112"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_HOME_AS_UP"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_HOME_AS_UP = android.app.ActionBar.DISPLAY_HOME_AS_UP;"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="112"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_TITLE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_TITLE = android.app.ActionBar.DISPLAY_SHOW_TITLE;"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="124"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_TITLE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_TITLE = android.app.ActionBar.DISPLAY_SHOW_TITLE;"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="124"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_CUSTOM"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_CUSTOM = android.app.ActionBar.DISPLAY_SHOW_CUSTOM;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="132"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar#DISPLAY_SHOW_CUSTOM"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int DISPLAY_SHOW_CUSTOM = android.app.ActionBar.DISPLAY_SHOW_CUSTOM;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java"
            line="132"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 13 (current min is 7): android.util.DisplayMetrics#DENSITY_TV"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;"
        errorLine2="                                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java"
            line="184"
            column="95"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 13 (current min is 7): android.util.DisplayMetrics#DENSITY_TV"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;"
        errorLine2="                                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java"
            line="184"
            column="95"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.KeyCharacterMap#VIRTUAL_KEYBOARD"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        KeyCharacterMap kmap = KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="505"
            column="53"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.KeyCharacterMap#VIRTUAL_KEYBOARD"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        KeyCharacterMap kmap = KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="505"
            column="53"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.content.pm.ActivityInfo#UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                final boolean splitWhenNarrow = (mUiOptions &amp; ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW) != 0;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="931"
            column="63"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.content.pm.ActivityInfo#UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                final boolean splitWhenNarrow = (mUiOptions &amp; ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW) != 0;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="931"
            column="63"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_BAR);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="983"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_BAR);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="983"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="987"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="987"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_MODE_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_MODE_OVERLAY);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="991"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_MODE_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            requestFeature(Window.FEATURE_ACTION_MODE_OVERLAY);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java"
            line="991"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#actionBarWidgetTheme"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mActivity.getTheme().resolveAttribute(android.R.attr.actionBarWidgetTheme, outValue, true);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="199"
            column="47"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#actionBarWidgetTheme"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mActivity.getTheme().resolveAttribute(android.R.attr.actionBarWidgetTheme, outValue, true);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="199"
            column="47"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.id#home"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mLogoNavItem = new ActionMenuItem(context, 0, android.R.id.home, 0, 0, mTitle);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="258"
            column="55"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.id#home"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mLogoNavItem = new ActionMenuItem(context, 0, android.R.id.home, 0, 0, mTitle);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="258"
            column="55"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#textAllCaps"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.textAllCaps"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="20"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#textAllCaps"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.textAllCaps"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="20"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#textAllCaps"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.textAllCaps"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.R.attr#textAllCaps"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.textAllCaps"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#showDividers"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        /* 2 */ android.R.attr.showDividers,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="24"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#showDividers"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        /* 2 */ android.R.attr.showDividers,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="24"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#dividerPadding"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        /* 3 */ android.R.attr.dividerPadding,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="25"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#dividerPadding"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        /* 3 */ android.R.attr.dividerPadding,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="25"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#animationResolution"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.animationResolution,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="207"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#animationResolution"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        android.R.attr.animationResolution,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="207"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_STATE_MASK"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        return (child.getMeasuredWidth()&amp;View.MEASURED_STATE_MASK)"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="17"
            column="42"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_STATE_MASK"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        return (child.getMeasuredWidth()&amp;View.MEASURED_STATE_MASK)"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="17"
            column="42"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_HEIGHT_STATE_SHIFT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                | ((child.getMeasuredHeight()>>View.MEASURED_HEIGHT_STATE_SHIFT)"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="18"
            column="48"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_HEIGHT_STATE_SHIFT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                | ((child.getMeasuredHeight()>>View.MEASURED_HEIGHT_STATE_SHIFT)"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="18"
            column="48"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_HEIGHT_STATE_SHIFT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                        &amp; (View.MEASURED_STATE_MASK>>View.MEASURED_HEIGHT_STATE_SHIFT));"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="19"
            column="54"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_HEIGHT_STATE_SHIFT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                        &amp; (View.MEASURED_STATE_MASK>>View.MEASURED_HEIGHT_STATE_SHIFT));"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="19"
            column="54"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_STATE_MASK"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                        &amp; (View.MEASURED_STATE_MASK>>View.MEASURED_HEIGHT_STATE_SHIFT));"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="19"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.View#MEASURED_STATE_MASK"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                        &amp; (View.MEASURED_STATE_MASK>>View.MEASURED_HEIGHT_STATE_SHIFT));"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsView.java"
            line="19"
            column="28"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_NEVER"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_NEVER = android.view.MenuItem.SHOW_AS_ACTION_NEVER;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="43"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_NEVER"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_NEVER = android.view.MenuItem.SHOW_AS_ACTION_NEVER;"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="43"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_IF_ROOM"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_IF_ROOM = android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="45"
            column="54"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_IF_ROOM"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_IF_ROOM = android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="45"
            column="54"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_ALWAYS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_ALWAYS = android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="52"
            column="53"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_ALWAYS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_ALWAYS = android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="52"
            column="53"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_WITH_TEXT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_WITH_TEXT = android.view.MenuItem.SHOW_AS_ACTION_WITH_TEXT;"
        errorLine2="                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="58"
            column="56"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_WITH_TEXT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_WITH_TEXT = android.view.MenuItem.SHOW_AS_ACTION_WITH_TEXT;"
        errorLine2="                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="58"
            column="56"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;"
        errorLine2="                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="65"
            column="67"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 14 (current min is 7): android.view.MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;"
        errorLine2="                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/MenuItem.java"
            line="65"
            column="67"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.widget.LinearLayout.LayoutParams#MATCH_PARENT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="193"
            column="57"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.widget.LinearLayout.LayoutParams#MATCH_PARENT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="193"
            column="57"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.widget.LinearLayout.LayoutParams#MATCH_PARENT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="201"
            column="57"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.widget.LinearLayout.LayoutParams#MATCH_PARENT"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="201"
            column="57"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mQueryTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);"
        errorLine2="                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1288"
            column="61"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mQueryTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);"
        errorLine2="                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1288"
            column="61"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.speech.RecognizerIntent#EXTRA_CALLING_PACKAGE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1501"
            column="30"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.speech.RecognizerIntent#EXTRA_CALLING_PACKAGE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1501"
            column="30"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.speech.RecognizerIntent#EXTRA_CALLING_PACKAGE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1558"
            column="30"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.speech.RecognizerIntent#EXTRA_CALLING_PACKAGE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1558"
            column="30"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.app.SearchManager#CURSOR_EXTRA_KEY_IN_PROGRESS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    ? extras.getBoolean(SearchManager.CURSOR_EXTRA_KEY_IN_PROGRESS)"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="277"
            column="41"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.app.SearchManager#CURSOR_EXTRA_KEY_IN_PROGRESS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    ? extras.getBoolean(SearchManager.CURSOR_EXTRA_KEY_IN_PROGRESS)"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="277"
            column="41"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.app.SearchManager#SUGGEST_COLUMN_TEXT_2_URL"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                mText2UrlCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="309"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 8 (current min is 7): android.app.SearchManager#SUGGEST_COLUMN_TEXT_2_URL"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                mText2UrlCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="309"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.SearchManager#SUGGEST_COLUMN_FLAGS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                mFlagsCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="312"
            column="46"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.app.SearchManager#SUGGEST_COLUMN_FLAGS"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                mFlagsCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="312"
            column="46"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#measureWithLargestChild"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            /* 0 */ android.R.attr.measureWithLargestChild,"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/TabsLinearLayout.java"
            line="11"
            column="21"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.R.attr#measureWithLargestChild"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            /* 0 */ android.R.attr.measureWithLargestChild,"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/TabsLinearLayout.java"
            line="11"
            column="21"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_BAR = android.view.Window.FEATURE_ACTION_BAR;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="35"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_BAR = android.view.Window.FEATURE_ACTION_BAR;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="35"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_BAR_OVERLAY = android.view.Window.FEATURE_ACTION_BAR_OVERLAY;"
        errorLine2="                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="36"
            column="59"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_BAR_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_BAR_OVERLAY = android.view.Window.FEATURE_ACTION_BAR_OVERLAY;"
        errorLine2="                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="36"
            column="59"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_MODE_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_MODE_OVERLAY = android.view.Window.FEATURE_ACTION_MODE_OVERLAY;"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="37"
            column="60"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 7): android.view.Window#FEATURE_ACTION_MODE_OVERLAY"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="    public static final long FEATURE_ACTION_MODE_OVERLAY = android.view.Window.FEATURE_ACTION_MODE_OVERLAY;"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/view/Window.java"
            line="37"
            column="60"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;2dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;2dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;1dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable/abs__search_dropdown_light.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;1dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable/abs__search_dropdown_light.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.widget.LinearLayout#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMenuView.onConfigurationChanged(newConfig);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="77"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.widget.LinearLayout#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMenuView.onConfigurationChanged(newConfig);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="77"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setAlpha(0);"
        errorLine2="                ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="140"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setAlpha(0);"
        errorLine2="                ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="140"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mMenuView.setAlpha(0);"
        errorLine2="                              ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="142"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mMenuView.setAlpha(0);"
        errorLine2="                              ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/AbsActionBarView.java"
            line="142"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mClose.setTranslationX(-mClose.getWidth() -"
        errorLine2="               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java"
            line="392"
            column="16"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mClose.setTranslationX(-mClose.getWidth() -"
        errorLine2="               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java"
            line="392"
            column="16"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContentView.setTranslationY(0);"
        errorLine2="                             ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="114"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContentView.setTranslationY(0);"
        errorLine2="                             ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="114"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContainerView.setTranslationY(0);"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="115"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContainerView.setTranslationY(0);"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="115"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.ViewGroup#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mActionView.onConfigurationChanged(newConfig);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="190"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.ViewGroup#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mActionView.onConfigurationChanged(newConfig);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="190"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.ViewGroup#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContextView.onConfigurationChanged(newConfig);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="192"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.ViewGroup#onConfigurationChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContextView.onConfigurationChanged(newConfig);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="192"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(0);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="566"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(0);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="566"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContainerView.setTranslationY(-mContainerView.getHeight());"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="572"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mContainerView.setTranslationY(-mContainerView.getHeight());"
        errorLine2="                               ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="572"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mSplitView.setAlpha(0);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="576"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mSplitView.setAlpha(0);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="576"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="584"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="584"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setTranslationY(0);"
        errorLine2="                           ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="585"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setTranslationY(0);"
        errorLine2="                           ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="585"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="600"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mContainerView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="600"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mSplitView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="611"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mSplitView.setAlpha(1);"
        errorLine2="                           ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="611"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#getActionBar"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mActionBar != null || mActivity.getActionBar() == null) {"
        errorLine2="                                            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="40"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#getActionBar"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mActionBar != null || mActivity.getActionBar() == null) {"
        errorLine2="                                            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="40"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.Window#invalidatePanelMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActivity.getWindow().invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="51"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.Window#invalidatePanelMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActivity.getWindow().invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="51"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#startActionMode"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mActivity.startActionMode(wrapped) == null) {"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="225"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#startActionMode"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mActivity.startActionMode(wrapped) == null) {"
        errorLine2="                      ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="225"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.view.ActionMode.Callback"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        public ActionModeCallbackWrapper(ActionMode.Callback callback) {"
        errorLine2="                                                    ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="238"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.view.ActionMode.Callback"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        public ActionModeCallbackWrapper(ActionMode.Callback callback) {"
        errorLine2="                                                    ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="238"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ActionMode#getMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mMenu = new MenuWrapper(mActionMode.getMenu());"
        errorLine2="                                                    ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="316"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ActionMode#getMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mMenu = new MenuWrapper(mActionMode.getMenu());"
        errorLine2="                                                    ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java"
            line="316"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 9 (current min is 7): android.content.pm.PackageManager#getActivityLogo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        mLogo = pm.getActivityLogo(((Activity) context).getComponentName());"
        errorLine2="                                   ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="197"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 9 (current min is 7): android.content.pm.PackageManager#getActivityLogo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        mLogo = pm.getActivityLogo(((Activity) context).getComponentName());"
        errorLine2="                                   ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="197"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 9 (current min is 7): android.content.pm.ApplicationInfo#loadLogo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mLogo = appInfo.loadLogo(pm);"
        errorLine2="                                    ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="203"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 9 (current min is 7): android.content.pm.ApplicationInfo#loadLogo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mLogo = appInfo.loadLogo(pm);"
        errorLine2="                                    ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="203"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.FrameLayout#onPopulateAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                super.onPopulateAccessibilityEvent(event);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1235"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.FrameLayout#onPopulateAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                super.onPopulateAccessibilityEvent(event);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1235"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.FrameLayout#onHoverEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return onHoverEvent(event);"
        errorLine2="                   ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1246"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.FrameLayout#onHoverEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return onHoverEvent(event);"
        errorLine2="                   ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1246"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.OnNavigationListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private ActionBar.OnNavigationListener mNavigationListener;"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="19"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.OnNavigationListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private ActionBar.OnNavigationListener mNavigationListener;"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="19"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.OnMenuVisibilityListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private Set&lt;OnMenuVisibilityListener> mMenuVisibilityListeners = new HashSet&lt;OnMenuVisibilityListener>(1);"
        errorLine2="                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="20"
            column="82"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.OnMenuVisibilityListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private Set&lt;OnMenuVisibilityListener> mMenuVisibilityListeners = new HashSet&lt;OnMenuVisibilityListener>(1);"
        errorLine2="                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="20"
            column="82"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#getActionBar"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar = activity.getActionBar();"
        errorLine2="                              ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="26"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#getActionBar"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar = activity.getActionBar();"
        errorLine2="                              ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="26"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addOnMenuVisibilityListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mActionBar.addOnMenuVisibilityListener(this);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="28"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addOnMenuVisibilityListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mActionBar.addOnMenuVisibilityListener(this);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="28"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): new android.app.ActionBar.LayoutParams"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.LayoutParams lp = new android.app.ActionBar.LayoutParams(layoutParams);"
        errorLine2="                              ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="54"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): new android.app.ActionBar.LayoutParams"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.LayoutParams lp = new android.app.ActionBar.LayoutParams(layoutParams);"
        errorLine2="                              ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="54"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#gravity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.gravity = layoutParams.gravity;"
        errorLine2="           ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="55"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#gravity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.gravity = layoutParams.gravity;"
        errorLine2="           ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="55"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#bottomMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.bottomMargin = layoutParams.bottomMargin;"
        errorLine2="           ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="56"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#bottomMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.bottomMargin = layoutParams.bottomMargin;"
        errorLine2="           ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="56"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#topMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.topMargin = layoutParams.topMargin;"
        errorLine2="           ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="57"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#topMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.topMargin = layoutParams.topMargin;"
        errorLine2="           ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="57"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#leftMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.leftMargin = layoutParams.leftMargin;"
        errorLine2="           ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="58"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#leftMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.leftMargin = layoutParams.leftMargin;"
        errorLine2="           ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="58"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#rightMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.rightMargin = layoutParams.rightMargin;"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="59"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 11 (current min is 7): android.app.ActionBar.LayoutParams#rightMargin"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        lp.rightMargin = layoutParams.rightMargin;"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="59"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.setCustomView(view, lp);"
        errorLine2="                   ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="60"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.setCustomView(view, lp);"
        errorLine2="                   ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="60"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#setListNavigationCallbacks"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.setListNavigationCallbacks(adapter, (callback != null) ? this : null);"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="91"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#setListNavigationCallbacks"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.setListNavigationCallbacks(adapter, (callback != null) ? this : null);"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="91"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.TabListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        private TabListener mListener;"
        errorLine2="                ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="227"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.app.ActionBar.TabListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        private TabListener mListener;"
        errorLine2="                ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="227"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setTag(this);"
        errorLine2="                       ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="231"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setTag(this);"
        errorLine2="                       ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="231"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setIcon"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setIcon(icon);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="251"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setIcon"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setIcon(icon);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="251"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setIcon"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setIcon(resId);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="257"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setIcon"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setIcon(resId);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="257"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setText"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setText(text);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="263"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setText"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setText(text);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="263"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setText"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setText(resId);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="269"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setText"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setText(resId);"
        errorLine2="                       ~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="269"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setCustomView(view);"
        errorLine2="                       ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="275"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setCustomView(view);"
        errorLine2="                       ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="275"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setCustomView(layoutResId);"
        errorLine2="                       ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="281"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setCustomView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setCustomView(layoutResId);"
        errorLine2="                       ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="281"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setTabListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setTabListener(listener != null ? this : null);"
        errorLine2="                       ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="303"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#setTabListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setTabListener(listener != null ? this : null);"
        errorLine2="                       ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="303"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.app.ActionBar.Tab#setContentDescription"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setContentDescription(resId);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="315"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.app.ActionBar.Tab#setContentDescription"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setContentDescription(resId);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="315"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.app.ActionBar.Tab#setContentDescription"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setContentDescription(contentDesc);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="321"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.app.ActionBar.Tab#setContentDescription"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeTab.setContentDescription(contentDesc);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="321"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#newTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return new TabWrapper(mActionBar.newTab());"
        errorLine2="                                         ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="384"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#newTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return new TabWrapper(mActionBar.newTab());"
        errorLine2="                                         ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="384"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="389"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="389"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, setSelected);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="394"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, setSelected);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="394"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, position);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="399"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, position);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="399"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, position, setSelected);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="404"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#addTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.addTab(((TabWrapper)tab).mNativeTab, position, setSelected);"
        errorLine2="                   ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="404"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#removeTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.removeTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="409"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#removeTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.removeTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="409"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#selectTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.selectTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="424"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#selectTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mActionBar.selectTab(((TabWrapper)tab).mNativeTab);"
        errorLine2="                   ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="424"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#getSelectedTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.Tab selected = mActionBar.getSelectedTab();"
        errorLine2="                                                        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="429"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#getSelectedTab"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.Tab selected = mActionBar.getSelectedTab();"
        errorLine2="                                                        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="429"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#getTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return (selected != null) ? (Tab)selected.getTag() : null;"
        errorLine2="                                                  ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="430"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#getTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return (selected != null) ? (Tab)selected.getTag() : null;"
        errorLine2="                                                  ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="430"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#getTabAt"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.Tab selected = mActionBar.getTabAt(index);"
        errorLine2="                                                        ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="435"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar#getTabAt"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.app.ActionBar.Tab selected = mActionBar.getTabAt(index);"
        errorLine2="                                                        ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="435"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#getTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return (selected != null) ? (Tab)selected.getTag() : null;"
        errorLine2="                                                  ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="436"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.ActionBar.Tab#getTag"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return (selected != null) ? (Tab)selected.getTag() : null;"
        errorLine2="                                                  ~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="436"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onPopulateAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.onPopulateAccessibilityEvent(event);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="220"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onPopulateAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.onPopulateAccessibilityEvent(event);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="220"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onHoverEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return onHoverEvent(event);"
        errorLine2="                   ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="232"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onHoverEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return onHoverEvent(event);"
        errorLine2="                   ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="232"
            column="20"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewConfiguration#hasPermanentMenuKey"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return ViewConfiguration.get(context).hasPermanentMenuKey();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java"
            line="130"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewConfiguration#hasPermanentMenuKey"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return ViewConfiguration.get(context).hasPermanentMenuKey();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java"
            line="130"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 7): new android.widget.LinearLayout.LayoutParams"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super((LinearLayout.LayoutParams) other);"
        errorLine2="            ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java"
            line="561"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 7): new android.widget.LinearLayout.LayoutParams"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super((LinearLayout.LayoutParams) other);"
        errorLine2="            ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java"
            line="561"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): new android.view.ActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(null/*TODO*/); //XXX this *should* be unused"
        errorLine2="        ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/ActionProviderWrapper.java"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): new android.view.ActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(null/*TODO*/); //XXX this *should* be unused"
        errorLine2="        ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/ActionProviderWrapper.java"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.ActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    public ActionProvider unwrap() {"
        errorLine2="           ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/ActionProviderWrapper.java"
            line="17"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.ActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    public ActionProvider unwrap() {"
        errorLine2="           ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/ActionProviderWrapper.java"
            line="17"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#setActivated"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            view.setActivated(activated);"
        errorLine2="                 ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java"
            line="629"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#setActivated"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            view.setActivated(activated);"
        errorLine2="                 ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java"
            line="629"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#jumpDrawablesToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        if (IS_HONEYCOMB) itemView.jumpDrawablesToCurrentState();"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/BaseMenuPresenter.java"
            line="102"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#jumpDrawablesToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        if (IS_HONEYCOMB) itemView.jumpDrawablesToCurrentState();"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/BaseMenuPresenter.java"
            line="102"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 9 (current min is 7): java.util.Locale#ROOT"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    setText(text.toString().toUpperCase(Locale.ROOT));"
        errorLine2="                                                               ~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="45"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 9 (current min is 7): java.util.Locale#ROOT"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    setText(text.toString().toUpperCase(Locale.ROOT));"
        errorLine2="                                                               ~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="45"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 9 (current min is 7): java.util.Locale#ROOT"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    setText(text.toString().toUpperCase(Locale.ROOT));"
        errorLine2="                                                               ~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="38"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 9 (current min is 7): java.util.Locale#ROOT"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    setText(text.toString().toUpperCase(Locale.ROOT));"
        errorLine2="                                                               ~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="38"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.CollapsibleActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        this.child = (CollapsibleActionView) child;"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java"
            line="15"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.CollapsibleActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        this.child = (CollapsibleActionView) child;"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java"
            line="15"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            heightSize = resolveSizeAndState(preferredHeight, heightMeasureSpec, 0);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAbsSpinner.java"
            line="235"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            heightSize = resolveSizeAndState(preferredHeight, heightMeasureSpec, 0);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAbsSpinner.java"
            line="235"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            widthSize = resolveSizeAndState(preferredWidth, widthMeasureSpec, 0);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAbsSpinner.java"
            line="236"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            widthSize = resolveSizeAndState(preferredWidth, widthMeasureSpec, 0);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAbsSpinner.java"
            line="236"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onRequestSendAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (super.onRequestSendAccessibilityEvent(child, event)) {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="880"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onRequestSendAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (super.onRequestSendAccessibilityEvent(child, event)) {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="880"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#appendRecord"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            event.appendRecord(record);"
        errorLine2="                  ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="886"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#appendRecord"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            event.appendRecord(record);"
        errorLine2="                  ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="886"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onInitializeAccessibilityNodeInfo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityNodeInfo(info);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="894"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onInitializeAccessibilityNodeInfo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityNodeInfo(info);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="894"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setScrollable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        info.setScrollable(isScrollableForAccessibility());"
        errorLine2="             ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="895"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setScrollable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        info.setScrollable(isScrollableForAccessibility());"
        errorLine2="             ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="895"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            info.setEnabled(selectedView.isEnabled());"
        errorLine2="                 ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="898"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            info.setEnabled(selectedView.isEnabled());"
        errorLine2="                 ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="898"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="904"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.ViewGroup#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="904"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#setScrollable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        event.setScrollable(isScrollableForAccessibility());"
        errorLine2="              ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="905"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#setScrollable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        event.setScrollable(isScrollableForAccessibility());"
        errorLine2="              ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="905"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#setToIndex"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        event.setToIndex(getLastVisiblePosition());"
        errorLine2="              ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="912"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityEvent#setToIndex"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        event.setToIndex(getLastVisiblePosition());"
        errorLine2="              ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="912"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setDividerDrawable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setDividerDrawable(a.getDrawable(/*com.android.internal.R.styleable.*/LinearLayout_divider));"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setDividerDrawable"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setDividerDrawable(a.getDrawable(/*com.android.internal.R.styleable.*/LinearLayout_divider));"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#jumpDrawablesToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.jumpDrawablesToCurrentState();"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="588"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#jumpDrawablesToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.jumpDrawablesToCurrentState();"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="588"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.graphics.drawable.Drawable#jumpToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mProgressDrawable != null) mProgressDrawable.jumpToCurrentState();"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="589"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.graphics.drawable.Drawable#jumpToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mProgressDrawable != null) mProgressDrawable.jumpToCurrentState();"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="589"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.graphics.drawable.Drawable#jumpToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mIndeterminateDrawable != null) mIndeterminateDrawable.jumpToCurrentState();"
        errorLine2="                                                                   ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="590"
            column="68"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.graphics.drawable.Drawable#jumpToCurrentState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mIndeterminateDrawable != null) mIndeterminateDrawable.jumpToCurrentState();"
        errorLine2="                                                                   ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="590"
            column="68"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.View#onVisibilityChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onVisibilityChanged(changedView, visibility);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="920"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.view.View#onVisibilityChanged"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onVisibilityChanged(changedView, visibility);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="920"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            setMeasuredDimension(View.resolveSizeAndState(dw, widthMeasureSpec, 0),"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1052"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            setMeasuredDimension(View.resolveSizeAndState(dw, widthMeasureSpec, 0),"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1052"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            setMeasuredDimension(View.resolveSizeAndState(dw, widthMeasureSpec, 0),"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1052"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#resolveSizeAndState"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            setMeasuredDimension(View.resolveSizeAndState(dw, widthMeasureSpec, 0),"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1052"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.View#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1164"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.View#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="1164"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setShowAsAction"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setShowAsAction(actionEnum);"
        errorLine2="                    ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="209"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setShowAsAction"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setShowAsAction(actionEnum);"
        errorLine2="                    ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="209"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setShowAsActionFlags"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setShowAsActionFlags(actionEnum);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="214"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setShowAsActionFlags"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setShowAsActionFlags(actionEnum);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="214"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionView(view);"
        errorLine2="                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="223"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionView(view);"
        errorLine2="                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="223"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionView(resId);"
        errorLine2="                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="230"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionView(resId);"
        errorLine2="                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="230"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#getActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            View view = mNativeItem.getActionView();"
        errorLine2="                                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="233"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#getActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            View view = mNativeItem.getActionView();"
        errorLine2="                                    ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="233"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mNativeItem.setActionView(new CollapsibleActionViewWrapper(view));"
        errorLine2="                            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="236"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#setActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mNativeItem.setActionView(new CollapsibleActionViewWrapper(view));"
        errorLine2="                            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="236"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#getActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        View actionView = mNativeItem.getActionView();"
        errorLine2="                                      ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="244"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.MenuItem#getActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        View actionView = mNativeItem.getActionView();"
        errorLine2="                                      ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="244"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionProvider(new ActionProviderWrapper(actionProvider));"
        errorLine2="                    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="253"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mNativeItem.setActionProvider(new ActionProviderWrapper(actionProvider));"
        errorLine2="                    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="253"
            column="21"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#getActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.view.ActionProvider nativeProvider = mNativeItem.getActionProvider();"
        errorLine2="                                                                 ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="259"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#getActionProvider"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android.view.ActionProvider nativeProvider = mNativeItem.getActionProvider();"
        errorLine2="                                                                 ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="259"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#expandActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.expandActionView();"
        errorLine2="                           ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="268"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#expandActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.expandActionView();"
        errorLine2="                           ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="268"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#collapseActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.collapseActionView();"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="273"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#collapseActionView"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.collapseActionView();"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="273"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#isActionViewExpanded"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.isActionViewExpanded();"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="278"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#isActionViewExpanded"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mNativeItem.isActionViewExpanded();"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="278"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.MenuItem.OnActionExpandListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeActionExpandListener = new android.view.MenuItem.OnActionExpandListener() {"
        errorLine2="                                                                    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="286"
            column="69"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 14 (current min is 7): android.view.MenuItem.OnActionExpandListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeActionExpandListener = new android.view.MenuItem.OnActionExpandListener() {"
        errorLine2="                                                                    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="286"
            column="69"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setOnActionExpandListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeItem.setOnActionExpandListener(mNativeActionExpandListener);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="305"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.MenuItem#setOnActionExpandListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mNativeItem.setOnActionExpandListener(mNativeActionExpandListener);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java"
            line="305"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="33"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="33"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="40"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="40"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#getTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationY();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#getTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationY();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationY(translationY);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="54"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.FrameLayout#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationY(translationY);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java"
            line="54"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineHorizontalScrollView.java"
            line="31"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineHorizontalScrollView.java"
            line="31"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineHorizontalScrollView.java"
            line="38"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineHorizontalScrollView.java"
            line="38"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="33"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="33"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="40"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="40"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#getTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationX();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#getTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationX();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationX(translationX);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="54"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationX(translationX);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java"
            line="54"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="41"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getAlpha();"
        errorLine2="                         ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="41"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="48"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setAlpha(alpha);"
        errorLine2="                  ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="48"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationX();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="55"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationX();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="55"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationX(translationX);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="62"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setTranslationX"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationX(translationX);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="62"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationY();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="69"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#getTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return super.getTranslationY();"
        errorLine2="                         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="69"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationY(translationY);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="76"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.ViewGroup#setTranslationY"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super.setTranslationY(translationY);"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/view/NineViewGroup.java"
            line="76"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): new android.widget.PopupWindow"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(context, attrs, defStyleAttr, defStyleRes);"
        errorLine2="        ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/PopupWindowCompat.java"
            line="85"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): new android.widget.PopupWindow"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(context, attrs, defStyleAttr, defStyleRes);"
        errorLine2="        ~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/PopupWindowCompat.java"
            line="85"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setMeasureWithLargestChildEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        tabLayout.setMeasureWithLargestChildEnabled(true);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="191"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.LinearLayout#setMeasureWithLargestChildEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        tabLayout.setMeasureWithLargestChildEnabled(true);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="191"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setAlpha(0);"
        errorLine2="                ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="224"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.widget.HorizontalScrollView#setAlpha"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setAlpha(0);"
        errorLine2="                ~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="224"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#addOnLayoutChangeListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener() {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="339"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.view.View#addOnLayoutChangeListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener() {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="339"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.view.View.OnLayoutChangeListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener() {"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="339"
            column="63"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 11 (current min is 7): android.view.View.OnLayoutChangeListener"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener() {"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="339"
            column="63"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getHintId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int hintId = mSearchable.getHintId();"
        errorLine2="                                     ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="570"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getHintId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int hintId = mSearchable.getHintId();"
        errorLine2="                                     ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="570"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mSearchable != null &amp;&amp; mSearchable.getVoiceSearchEnabled()) {"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="787"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchEnabled"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mSearchable != null &amp;&amp; mSearchable.getVoiceSearchEnabled()) {"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="787"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchWebSearch"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (mSearchable.getVoiceSearchLaunchWebSearch()) {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="789"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchWebSearch"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (mSearchable.getVoiceSearchLaunchWebSearch()) {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="789"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchRecognizer"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            } else if (mSearchable.getVoiceSearchLaunchRecognizer()) {"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="791"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchRecognizer"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            } else if (mSearchable.getVoiceSearchLaunchRecognizer()) {"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="791"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getHintId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int hintId = mSearchable.getHintId();"
        errorLine2="                                     ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1088"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getHintId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            int hintId = mSearchable.getHintId();"
        errorLine2="                                     ~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1088"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestThreshold"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mQueryTextView.setThreshold(mSearchable.getSuggestThreshold());"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1105"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestThreshold"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mQueryTextView.setThreshold(mSearchable.getSuggestThreshold());"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1105"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (mSearchable.getSuggestAuthority() != null) {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1114"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (mSearchable.getSuggestAuthority() != null) {"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1114"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mSearchable.getSuggestAuthority() != null) {"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1131"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mSearchable.getSuggestAuthority() != null) {"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1131"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchWebSearch"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (searchable.getVoiceSearchLaunchWebSearch()) {"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1235"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchWebSearch"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (searchable.getVoiceSearchLaunchWebSearch()) {"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1235"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchRecognizer"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            } else if (searchable.getVoiceSearchLaunchRecognizer()) {"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1239"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceSearchLaunchRecognizer"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            } else if (searchable.getVoiceSearchLaunchRecognizer()) {"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1239"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1295"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onInitializeAccessibilityEvent"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityEvent(event);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1295"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onInitializeAccessibilityNodeInfo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityNodeInfo(info);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1301"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.widget.LinearLayout#onInitializeAccessibilityNodeInfo"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onInitializeAccessibilityNodeInfo(info);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1301"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setClassName"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        info.setClassName(SearchView.class.getName());"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1302"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 14 (current min is 7): android.view.accessibility.AccessibilityNodeInfo#setClassName"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        info.setClassName(SearchView.class.getName());"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1302"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        intent.setComponent(mSearchable.getSearchActivity());"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1491"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        intent.setComponent(mSearchable.getSearchActivity());"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1491"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ComponentName searchActivity = searchable.getSearchActivity();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1500"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ComponentName searchActivity = searchable.getSearchActivity();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1500"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ComponentName searchActivity = searchable.getSearchActivity();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1514"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSearchActivity"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ComponentName searchActivity = searchable.getSearchActivity();"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1514"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageModeId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceLanguageModeId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1542"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageModeId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceLanguageModeId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1542"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageModeId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            languageModel = resources.getString(searchable.getVoiceLanguageModeId());"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1543"
            column="60"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageModeId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            languageModel = resources.getString(searchable.getVoiceLanguageModeId());"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1543"
            column="60"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoicePromptTextId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoicePromptTextId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1545"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoicePromptTextId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoicePromptTextId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1545"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoicePromptTextId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            prompt = resources.getString(searchable.getVoicePromptTextId());"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1546"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoicePromptTextId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            prompt = resources.getString(searchable.getVoicePromptTextId());"
        errorLine2="                                                    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1546"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceLanguageId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1548"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceLanguageId() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1548"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            language = resources.getString(searchable.getVoiceLanguageId());"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1549"
            column="55"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceLanguageId"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            language = resources.getString(searchable.getVoiceLanguageId());"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1549"
            column="55"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceMaxResults"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceMaxResults() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1551"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceMaxResults"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (searchable.getVoiceMaxResults() != 0) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1551"
            column="24"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceMaxResults"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            maxResults = searchable.getVoiceMaxResults();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1552"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getVoiceMaxResults"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            maxResults = searchable.getVoiceMaxResults();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1552"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestIntentAction"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                action = mSearchable.getSuggestIntentAction();"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1587"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestIntentAction"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                action = mSearchable.getSuggestIntentAction();"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1587"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestIntentData"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                data = mSearchable.getSuggestIntentData();"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1596"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestIntentData"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                data = mSearchable.getSuggestIntentData();"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java"
            line="1596"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#invalidateOptionsMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        invalidateOptionsMenu();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="155"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 7): android.app.Activity#invalidateOptionsMenu"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        invalidateOptionsMenu();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="155"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        String authority = mSearchable.getSuggestAuthority();"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="208"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestAuthority"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        String authority = mSearchable.getSuggestAuthority();"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="208"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestPath"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final String contentPath = mSearchable.getSuggestPath();"
        errorLine2="                                               ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="220"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestPath"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final String contentPath = mSearchable.getSuggestPath();"
        errorLine2="                                               ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="220"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestSelection"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        String selection = mSearchable.getSuggestSelection();"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="229"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 8 (current min is 7): android.app.SearchableInfo#getSuggestSelection"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        String selection = mSearchable.getSuggestSelection();"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java"
            line="229"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:showDividers requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:showDividers&quot;>middle&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="88"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:showDividers requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:showDividers&quot;>middle&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="88"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:dividerPadding requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:dividerPadding&quot;>12dip&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="89"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:dividerPadding requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:dividerPadding&quot;>12dip&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="89"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:textAllCaps requires API level 14 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:textAllCaps&quot;>true&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="101"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:textAllCaps requires API level 14 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:textAllCaps&quot;>true&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="101"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:showDividers requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:showDividers&quot;>middle&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="183"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:showDividers requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:showDividers&quot;>middle&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="183"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:dividerPadding requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:dividerPadding&quot;>6dip&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="184"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:dividerPadding requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:dividerPadding&quot;>6dip&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="184"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:spinnerMode requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:spinnerMode&quot;>dropdown&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="214"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:spinnerMode requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:spinnerMode&quot;>dropdown&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="214"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:animationResolution requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:animationResolution&quot;>33&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="258"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:animationResolution requires API level 11 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:animationResolution&quot;>33&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="258"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:textAllCaps requires API level 14 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:textAllCaps&quot;>@bool/abs__config_actionMenuItemAllCaps&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="309"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="android:textAllCaps requires API level 14 (current min is 7)"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:textAllCaps&quot;>@bool/abs__config_actionMenuItemAllCaps&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__styles.xml"
            line="309"
            column="15"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="  &lt;uses-sdk android:minSdkVersion=&quot;7&quot; android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/AndroidManifest.xml"
            line="3"
            column="3"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="  &lt;uses-sdk android:minSdkVersion=&quot;7&quot; android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/AndroidManifest.xml"
            line="3"
            column="3"/>
    </issue>

    <issue
        id="WrongCall"
        severity="Error"
        message="Suspicious method call; should probably call &quot;layout&quot; rather than &quot;onLayout&quot;"
        category="Correctness"
        priority="6"
        summary="Finds cases where the wrong call is made, such as calling `onMeasure` instead of `measure`"
        explanation="Custom views typically need to call `measure()` on their children, not `onMeasure`. Ditto for onDraw, onLayout, etc."
        errorLine1="                this.onLayout(false, getLeft(), getTop(), getRight(), getBottom());"
        errorLine2="                     ~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="714"
            column="22"/>
    </issue>

    <issue
        id="WrongCall"
        severity="Error"
        message="Suspicious method call; should probably call &quot;layout&quot; rather than &quot;onLayout&quot;"
        category="Correctness"
        priority="6"
        summary="Finds cases where the wrong call is made, such as calling `onMeasure` instead of `measure`"
        explanation="Custom views typically need to call `measure()` on their children, not `onMeasure`. Ditto for onDraw, onLayout, etc."
        errorLine1="                this.onLayout(false, getLeft(), getTop(), getRight(), getBottom());"
        errorLine2="                     ~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="714"
            column="22"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="Should explicitly set android:allowBackup to true or false (it&apos;s true by default, and that can have some security implications for the application&apos;s data)"
        category="Security"
        priority="3"
        summary="Ensure that allowBackup is explicitly set in the application&apos;s manifest"
        explanation="The allowBackup attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup

By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.

This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.

Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.

To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`"
        url="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        urls="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="  &lt;application/>"
        errorLine2="  ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/AndroidManifest.xml"
            line="4"
            column="3"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="Should explicitly set android:allowBackup to true or false (it&apos;s true by default, and that can have some security implications for the application&apos;s data)"
        category="Security"
        priority="3"
        summary="Ensure that allowBackup is explicitly set in the application&apos;s manifest"
        explanation="The allowBackup attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup

By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.

This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.

Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.

To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`"
        url="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        urls="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="  &lt;application/>"
        errorLine2="  ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/AndroidManifest.xml"
            line="4"
            column="3"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a FrameLayout: layout_alignParentTop"
        category="Performance"
        priority="6"
        summary="Looks for layout params that are not valid for the given parent layout"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_alignParentTop=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a FrameLayout: layout_alignParentTop"
        category="Performance"
        priority="6"
        summary="Looks for layout params that are not valid for the given parent layout"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_alignParentTop=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a FrameLayout: layout_below"
        category="Performance"
        priority="6"
        summary="Looks for layout params that are not valid for the given parent layout"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="               android:layout_below=&quot;@id/abs__action_bar_container&quot; />"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="52"
            column="16"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a FrameLayout: layout_below"
        category="Performance"
        priority="6"
        summary="Looks for layout params that are not valid for the given parent layout"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="               android:layout_below=&quot;@id/abs__action_bar_container&quot; />"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="52"
            column="16"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one &lt;TextView/> and a compound drawable"
        category="Performance"
        priority="6"
        summary="Checks whether the current node can be replaced by a `TextView` using compound drawables."
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).

If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.

There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one &lt;TextView/> and a compound drawable"
        category="Performance"
        priority="6"
        summary="Checks whether the current node can be replaced by a `TextView` using compound drawables."
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).

If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.

There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a layout_width of 0dip instead of wrap_content for better performance"
        category="Performance"
        priority="3"
        summary="Looks for inefficient weight declarations in LinearLayouts"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="            android:layout_width=&quot;wrap_content&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a layout_width of 0dip instead of wrap_content for better performance"
        category="Performance"
        priority="3"
        summary="Looks for inefficient weight declarations in LinearLayouts"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="            android:layout_width=&quot;wrap_content&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a layout_width of 0dip instead of wrap_content for better performance"
        category="Performance"
        priority="3"
        summary="Looks for inefficient weight declarations in LinearLayouts"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="                android:layout_width=&quot;wrap_content&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="77"
            column="17"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a layout_width of 0dip instead of wrap_content for better performance"
        category="Performance"
        priority="3"
        summary="Looks for inefficient weight declarations in LinearLayouts"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="                android:layout_width=&quot;wrap_content&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="77"
            column="17"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Looks for nested layout weights, which are costly"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                android:layout_weight=&quot;1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="79"
            column="17"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Looks for nested layout weights, which are costly"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                android:layout_weight=&quot;1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="79"
            column="17"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Looks for nested layout weights, which are costly"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                  android:layout_weight=&quot;1&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="89"
            column="19"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Looks for nested layout weights, which are costly"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                  android:layout_weight=&quot;1&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="89"
            column="19"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background ?attr/actionBarItemBackground with a theme that also paints a background (inferred theme is @android:style/Theme)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="      android:background=&quot;?attr/actionBarItemBackground&quot;>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background ?attr/actionBarItemBackground with a theme that also paints a background (inferred theme is @android:style/Theme)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="      android:background=&quot;?attr/actionBarItemBackground&quot;>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.abs__dialog_min_width_major appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_major&quot;>45%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values-xlarge/abs__dimens.xml"
            line="40"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.abs__dialog_min_width_major appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_major&quot;>45%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values-xlarge/abs__dimens.xml"
            line="40"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.abs__dialog_min_width_minor appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_minor&quot;>72%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values-xlarge/abs__dimens.xml"
            line="44"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.abs__dialog_min_width_minor appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_minor&quot;>72%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values-xlarge/abs__dimens.xml"
            line="44"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.sherlock_spinner_dropdown_item appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/sherlock_spinner_dropdown_item.xml"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-v14/sherlock_spinner_dropdown_item.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.sherlock_spinner_dropdown_item appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/sherlock_spinner_dropdown_item.xml"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-v14/sherlock_spinner_dropdown_item.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.sherlock_spinner_item appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/sherlock_spinner_item.xml"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-v14/sherlock_spinner_item.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.sherlock_spinner_item appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/sherlock_spinner_item.xml"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-v14/sherlock_spinner_item.xml"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This LinearLayout layout or its LinearLayout parent is useless; transfer the background attribute to the other view"
        category="Performance"
        priority="2"
        summary="Checks whether a parent layout can be removed."
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This LinearLayout layout or its LinearLayout parent is useless; transfer the background attribute to the other view"
        category="Performance"
        priority="2"
        summary="Checks whether a parent layout can be removed."
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Looks for ellipsis strings (...) which can be replaced with an ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;abs__activity_chooser_view_see_all&quot;>See all...&lt;/string>"
        errorLine2="                                                      ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__strings.xml"
            line="31"
            column="55"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Looks for ellipsis strings (...) which can be replaced with an ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;abs__activity_chooser_view_see_all&quot;>See all...&lt;/string>"
        errorLine2="                                                      ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/values/abs__strings.xml"
            line="31"
            column="55"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The abs__list_divider_holo_dark.9.png icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Finds icons that have identical bitmaps across various configuration parameters"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_divider_holo_dark.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_divider_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The abs__list_divider_holo_dark.9.png icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Finds icons that have identical bitmaps across various configuration parameters"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_divider_holo_dark.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_divider_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The abs__list_divider_holo_light.9.png icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Finds icons that have identical bitmaps across various configuration parameters"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_divider_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_divider_holo_light.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The abs__list_divider_holo_light.9.png icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Finds icons that have identical bitmaps across various configuration parameters"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_divider_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_divider_holo_light.9.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: abs__ic_clear_normal.png (found in drawable-hdpi, drawable-mdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: abs__ic_clear_normal.png (found in drawable-hdpi, drawable-mdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_right_selected_holo_dark.9.png, abs__textfield_search_right_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_right_selected_holo_dark.9.png, abs__textfield_search_right_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_right_selected_holo_dark.9.png, abs__textfield_search_right_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_right_selected_holo_dark.9.png, abs__textfield_search_right_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_selected_holo_dark.9.png, abs__textfield_search_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_selected_holo_dark.9.png, abs__textfield_search_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png"/>
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int)"
        category="Usability"
        priority="3"
        summary="Checks that custom views define the expected constructors"
        explanation="Some layout tools (such as the Android layout editor for Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int)"
        category="Usability"
        priority="3"
        summary="Checks that custom views define the expected constructors"
        explanation="Some layout tools (such as the Android layout editor for Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor.">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__home&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__home&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_home.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_title_item.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_bar_title_item.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton android:id=&quot;@+id/abs__imageButton&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_menu_item_layout.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton android:id=&quot;@+id/abs__imageButton&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_menu_item_layout.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:layout_width=&quot;wrap_content&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_mode_close_item.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:layout_width=&quot;wrap_content&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_mode_close_item.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:layout_width=&quot;wrap_content&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_mode_close_item.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:layout_width=&quot;wrap_content&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__action_mode_close_item.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="57"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView android:id=&quot;@+id/abs__image&quot;"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view.xml"
            line="57"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="32"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__activity_chooser_view_list_item.xml"
            line="32"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="&lt;ImageView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__list_menu_item_icon.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="&lt;ImageView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__list_menu_item_icon.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-xlarge/abs__screen_action_bar_overlay.xml"
            line="45"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout-xlarge/abs__screen_action_bar_overlay.xml"
            line="45"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__screen_action_bar_overlay.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon1&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon1&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@+id/edit_query&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="38"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@+id/edit_query&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="38"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon2&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="49"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon2&quot;"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="49"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="63"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/huibin/Desktop/github-v2/actionbarsherlock/res/layout/abs__search_view.xml"
            line="63"
            column="9"/>
    </issue>

</issues>
